---
title: "Data Pull Try"
author: Ben Sunshine
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(shinyWidgets)
library(scales)
library(shiny)
library(rvest)
```

```{r}
states_df <- 
  tibble(state = state.name) %>%
  bind_cols(tibble(abb = state.abb)) %>% 
  bind_rows(tibble(state = "District of Columbia", abb = "DC"))

intrade08 <- read_csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/intrade08.csv") %>%
  select(2:7) %>%
  mutate(statename = as.factor(statename),
         democrat_candidate = "Barack Obama",
         republican_candidate = "John McCain",
         pred_winner = case_when(
           PriceD > PriceR ~ "democrat",
           PriceR > PriceD ~ "republican",
           .default = "Tie"
           )
         ) %>%
  rename(#"state" = "statename",
    "democrat" = "PriceD",
    "republican" = "PriceR") %>%
  filter(day <= as.Date("2008-11-06"))

intrade12 <- read_csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/intrade12.csv") %>%
  select(2:7) %>%
  mutate(statename = as.factor(statename),
         democrat_candidate = "Barack Obama",
         republican_candidate = "Mitt Romney",
         pred_winner = case_when(
           PriceD > PriceR ~ "democrat",
           PriceR > PriceD ~ "republican",
           .default = "Tie"
           )
         )%>%
  rename(#"state" = "statename",
    "democrat" = "PriceD",
    "republican" = "PriceR") %>%
  filter(day <= as.Date("2012-11-08"))

polls08 <- read_csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/polls08.csv") %>%
  rename("statename" = "state") %>%
  mutate(statename = as.factor(statename), 
         democrat_candidate = "Barack Obama") %>%
  left_join(states_df, by = c("statename" = "abb")) %>%
  rename("democrat" = "Obama",
         "republican" = "McCain",
         "date" = "middate") %>%
  mutate(pred_winner = case_when(
           democrat > republican ~ "democrat",
           republican > democrat ~ "republican",
           .default = "Tie"
           )) %>%
  select(-statename) %>%
  select(state, everything())

polls12 <- read_csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/polls12.csv") %>%
  select(2:6) %>%
  rename("statename" = "state") %>%
  mutate(statename = as.factor(statename), 
         democrat_candidate = "Barack Obama",
         republican_candidate = "Mitt Romney") %>%
  left_join(states_df, by = c("statename" = "abb")) %>%
  rename("democrat" = "Obama",
         "republican" = "Romney",
         "date" = "middate") %>%
  mutate(pred_winner = case_when(
           democrat > republican ~ "democrat",
           republican > democrat ~ "republican",
           .default = "Tie"
           )) %>%
  select(-statename) %>%
  select(state, everything())


```

```{r}
## '08 election
`2008_results_scrape` <- read_html("https://en.wikipedia.org/wiki/2008_United_States_presidential_election")

`2008_election_tables` <- `2008_results_scrape` %>% html_nodes("table.wikitable")

`2008_results_table` <- `2008_election_tables`[[10]]

`2008_results_df` <- 
  `2008_results_table` %>% 
  html_table(header = T) 

new_names <- c("Column1", "Column2", 
               "Barack_Obama_Democratic", 
               "Barack_Obama_Democratic",
               "Barack_Obama_Democratic", 
               "John_McCain_Republican", 
               "John_McCain_Republican",
               "John_McCain_Republican", 
               "Ralph_Nader_Independent", 
               "Ralph_Nader_Independent",
               "Ralph_Nader_Independent", 
               "Bob_Barr_Libertarian", 
               "Bob_Barr_Libertarian",
               "Bob_Barr_Libertarian", 
               "Chuck_Baldwin_Constitution", 
               "Chuck_Baldwin_Constitution",
               "Chuck_Baldwin_Constitution", 
               "Cynthia_McKinney_Green", 
               "Cynthia_McKinney_Green",
               "Cynthia_McKinney_Green", 
               "Others","Others","Others", 
               "Margin", "Margin",
               "Total_votes", "Total_votes")


# Rename the nameless columns
names(`2008_results_df`)[names(`2008_results_df`) == ""] <- new_names

`2008_results_df` <-
  `2008_results_df` %>%
  select(1,4,7, 26) %>%
  rename("state" = "Column1",
         "democrat" = "Barack ObamaDemocratic",
         "republican" = "John McCainRepublican",
         "votes" = "Total votes") %>%
  slice(-1) %>%
  mutate(votes = as.numeric(str_replace_all(votes, ",", "")),
         democrat = as.numeric(str_replace_all(democrat, "%", "")),
         republican = as.numeric(str_replace_all(republican, "%", "")),
         state = as.factor(state)) %>%
  mutate(state = case_when(
    state == "Nebraska†" ~ "Nebraska",
    state == "Maine†" ~ "Maine",
    .default = state
  ))



## '12 Election
`2012_results_scrape` <- read_html("https://en.wikipedia.org/wiki/2012_United_States_presidential_election")

`2012_election_tables` <- `2012_results_scrape` %>% html_nodes("table.wikitable")

`2012_results_table` <- `2012_election_tables`[[8]]

`2012_results_df` <- 
  `2012_results_table` %>% 
  html_table(header = T) %>%
  select(1,3,6,19)

new_names <- c("state", "democrat", 
               "republican", "votes")

# Rename the nameless columns
names(`2012_results_df`)[names(`2012_results_df`) == ""] <- new_names

`2012_results_df` <-
  `2012_results_df` %>%
  rename("state" = "State/District",
         "democrat" = "Barack ObamaDemocratic",
         "republican" = "Mitt RomneyRepublican",
         "votes" = "Total") %>%
  slice(-1) %>%
  mutate(votes = as.numeric(str_replace_all(votes, ",", "")),
         democrat = as.numeric(str_replace_all(democrat, "%", "")),
         republican = as.numeric(str_replace_all(republican, "%", "")),
         state = as.factor(state)) %>%
  filter(state != "ME-1Tooltip Maine's 1st congressional district" &
           state != "ME-2Tooltip Maine's 2nd congressional district" &
           state != "NE-1Tooltip Nebraska's 1st congressional district") %>%
  mutate(state = case_when(
    state == "Nebraska†" ~ "Nebraska",
    state == "Maine†" ~ "Maine",
    state == "District of ColumbiaDistrict of Columbia" ~ "District of Columbia",
    state == "New Jersey[121]" ~ "New Jersey",
    state == "New York[122]" ~ "New York",
    state == "Ohio[123]" ~ "Ohio",
    state == "Wisconsin[124]" ~ "Wisconsin",
    .default = state
  ))



```



```{r}
intrade_combined <- bind_rows(
  mutate(intrade08, year = 2008),
  mutate(intrade12, year = 2012)
) %>%
  rename("date" = "day",
         "state" = "statename")

intrade_combined_election_eve <-
  intrade_combined %>%
  filter((year == 2008 & date == "2008-11-03") |
           (year == 2012 & date == "2012-11-05"))

polls_combined <- bind_rows(
  mutate(polls08, year = 2008),
  mutate(polls12, year = 2012)
) %>%
  mutate(scale = 100,
         state = as.factor(state))


polls_combined %>%
  filter((year == 2008 & date <= "2008-11-03")) %>%
  group_by(date) %>%
  summarise(democrat_avg = mean(democrat),
            republican_avg = mean(republican)) %>%
  ungroup() %>%
  ggplot(aes(x = date,
             y = democrat_avg)) +
  geom_line(aes(x = date, y = democrat_avg), colour = "blue") +
  geom_hline(yintercept = 50, colour = "black") +
  geom_line(aes(x = date, y = republican_avg), colour = "red") +
  scale_y_continuous(limits = c(0,100))


polls_combined_election_eve_08 <-
  polls_combined %>%
  filter((year == 2008 & date <= "2008-11-03")) %>%
  group_by(state, date, year) %>%
  summarise(democrat_avg = mean(democrat),
            republican_avg = mean(republican)) %>%
  ungroup() %>%
  group_by(state) %>%
  slice_max(date) %>%
  mutate(pred_winner = case_when(
           democrat_avg > republican_avg ~ "democrat",
           republican_avg > democrat_avg ~ "republican",
           .default = "Tie"
           ))

polls_combined_election_eve_12 <-
  polls_combined %>%
  filter((year == 2012 & date <= "2012-11-05")) %>%
  group_by(state, date, year) %>%
  summarise(democrat_avg = mean(democrat),
            republican_avg = mean(republican)) %>%
  ungroup() %>%
  group_by(state) %>%
  slice_max(date) %>%
  mutate(pred_winner = case_when(
           democrat_avg > republican_avg ~ "democrat",
           republican_avg > democrat_avg ~ "republican",
           .default = "Tie"
           ))

polls_eve_combined_08_12 <-
  bind_rows(polls_combined_election_eve_08, polls_combined_election_eve_12)





```


```{r}
unique_states <- unique(intrade_combined$state) %>% sort()
unique_polls <- unique(polls_combined$Pollster) %>% sort()

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons("election_sel", "Election Cycle:", 
                   choices = c("2008","2012"), 
                   selected = "2008"),
      
      selectInput("data_source", "Select Data Source:", 
                  choices = c("Betting Markets" = "intrade", "Polling Data" = "polls")),
      
      dateRangeInput("date_range", "Select Date Range:",
                     start = min(polls_combined$date), 
                     end = max(polls_combined$date),
                     min = min(polls_combined$date), 
                     max = max(polls_combined$date)
      ),
      
      pickerInput("state_sel", "Select State(s):",
                  choices = unique_states, 
                  selected = unique_states,
                  multiple = TRUE,
                  options = list(
                    `actions-box` = TRUE, 
                    `selected-text-format` = "count > 2",
                    `count-selected-text` = "{0}/{1} States")
      ),
      
      pickerInput("poll_options", "Select Poll(s):",
                  choices = unique_polls, 
                  selected = unique_polls,
                  multiple = TRUE,
                  options = list(
                    `actions-box` = TRUE, 
                    `selected-text-format` = "count > 2",
                    `count-selected-text` = "{0}/{1} Polls")
      )
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Data", 
                 dataTableOutput("data_check")),
        tabPanel("Plot", 
                 plotOutput("plot")),
        tabPanel("Summary", 
                 verbatimTextOutput("summary"))
      )
    )
  )
)


server <- function(input, output, session) {
  
  # relevant dates
  observeEvent(input$election_sel,{
    
    if (input$data_source == "polls") {
      low_date <-
        polls_combined %>%
        filter(year == as.numeric(input$election_sel)) %>%
        slice_min(date) %>%
        pull(date) %>%
        unique()
      
      high_date <-
        polls_combined %>%
        filter(year == as.numeric(input$election_sel)) %>%
        slice_max(date) %>%
        pull(date) %>%
        unique()
    }
    
    if (input$data_source == "intrade") {
      low_date <-
        intrade_combined %>%
        filter(year == as.numeric(input$election_sel)) %>%
        slice_min(date) %>%
        pull(date) %>%
        unique()
      
      high_date <-
        intrade_combined %>%
        filter(year == as.numeric(input$election_sel)) %>%
        slice_max(date) %>%
        pull(date) %>%
        unique()
    }
    
    updateDateRangeInput(session = session,
                         inputId = "date_range", 
                         start = low_date, 
                         end = high_date, 
                         min = low_date, 
                         max = high_date)
  })
  
  # relvant polls when state selected
  observeEvent(input$state_sel,{
    relevant_polls <- 
      polls_combined %>%
      filter(state %in% input$state_sel) %>%
      distinct(Pollster) %>% 
      arrange(Pollster)
    
    updatePickerInput(session = session,
                      inputId = "poll_options", 
                      choices = relevant_polls, 
                      selected = relevant_polls, 
                      options = list(
                        `actions-box` = TRUE, 
                        `selected-text-format` = "count > 2",
                        `count-selected-text` = "{0}/{1} Polls"
                      )
    )
  })
  

  data <- reactive({
    if(input$data_source == "intrade") {
      data_source <- 
        intrade_combined %>%
        filter(state %in% input$state_sel) %>%
        filter(date >= input$date_range[1]) %>%
        filter(date <= input$date_range[2])
    }
    
    else {
      data_source <-
        polls_combined %>%
        filter(state %in% input$state_sel) %>%
        filter(Pollster %in% input$poll_options) %>% 
        filter(date >= input$date_range[1]) %>%
        filter(date <= input$date_range[2])
    }
    return(data_source)
  })
  
  output$data_check <- renderDataTable({
    data()
  })
  
  output$plot <- renderPlot({
    
    ggplot(data(), aes(x = democrat, y = republican)) +
      geom_point() +
      geom_abline(intercept = 0, slope = -1, linetype = "dashed", color = "red") +
      labs(x = "Democrat", y = "Republican") +
      # scale_x_continuous(labels = percent_format()) +
      # scale_y_continuous(labels = percent_format()) +
      ggtitle("Comparison of Democrat vs Republican Support") +
      theme_minimal()
    
    data() %>%
      ggplot(aes(x = date,
      ))
  })
  
  # output$summary <- renderPrint({
  #   data_source <- data()
  #   summary(data_source$democrat)
  #   summary(data_source$republican)
  # })
}

shinyApp(ui = ui, server = server)

```




